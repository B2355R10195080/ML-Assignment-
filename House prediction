import numpy as np

from sklearn.linear_model import LinearRegression

from sklearn.model_selection import train_test_split

from sklearn.metrics import mean_squared_error



# Simple dataset (features: Area (sqft), Number of Rooms, Age (years); target: Rent ($))

# Example data

X = np.array([

    [1000, 2, 10],  # Area: 1000 sqft, Rooms: 2, Age: 10 years

    [1500, 3, 5],   # Area: 1500 sqft, Rooms: 3, Age: 5 years

    [2000, 4, 1],   # Area: 2000 sqft, Rooms: 4, Age: 1 year

    [2500, 5, 15],  # Area: 2500 sqft, Rooms: 5, Age: 15 years

    [3000, 6, 8]    # Area: 3000 sqft, Rooms: 6, Age: 8 years

])

y = np.array([1200, 1800, 2400, 3000, 3600])  # Corresponding rents



# Split the dataset into training and testing sets

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=42)



# Create and train the model

model = LinearRegression()

model.fit(X_train, y_train)



# Get user input

area = float(input("Enter the area of the house in square feet: "))

rooms = int(input("Enter the number of rooms in the house: "))

age = float(input("Enter the age of the house in years: "))



# Make a prediction

predicted_rent = model.predict([[area, rooms, age]])

print(f"Predicted rent for a house with {area} sqft, {rooms} rooms, and age {age} years is: ${predicted_rent[0]:.2f}")



# Evaluate the model on the test set

y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)

print(f"Mean Squared Error on the test set: {mse:.2f}")
